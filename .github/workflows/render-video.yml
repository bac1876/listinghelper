name: Render Real Estate Video

on:
  workflow_dispatch:
    inputs:
      images:
        description: 'JSON array of image URLs'
        required: true
        type: string
      propertyDetails:
        description: 'JSON object with property details'
        required: true
        type: string
      settings:
        description: 'JSON object with render settings'
        required: false
        type: string
        default: '{"durationPerImage":8,"effectSpeed":"medium","transitionDuration":1.5}'
      jobId:
        description: 'Unique job identifier'
        required: true
        type: string

jobs:
  render-video:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'remotion-tours/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./remotion-tours
      run: |
        npm ci
        # Install additional dependencies for GitHub Actions
        npm install -g @remotion/cli
    
    - name: Parse inputs
      id: parse
      run: |
        echo "Parsing inputs..."
        
        # Log raw images input
        echo "Raw images input:"
        echo '${{ inputs.images }}'
        
        # Save inputs to files using cat with heredoc to avoid shell interpretation
        cat > /tmp/images.json << 'EOF'
        ${{ inputs.images }}
        EOF
        
        cat > /tmp/propertyDetails.json << 'EOF'
        ${{ inputs.propertyDetails }}
        EOF
        
        cat > /tmp/settings.json << 'EOF'
        ${{ inputs.settings }}
        EOF
        
        # Log parsed image count
        echo "Parsed image count:"
        node -e "const imgs = JSON.parse(require('fs').readFileSync('/tmp/images.json', 'utf8')); console.log('Total images:', imgs.length); imgs.forEach((img, i) => console.log(\`  Image \${i+1}: \${img}\`));"
        
        echo "Inputs saved to temporary files"
    
    - name: Render video with Remotion
      working-directory: ./remotion-tours
      env:
        REMOTION_IMAGES: ${{ inputs.images }}
        REMOTION_PROPERTY_DETAILS: ${{ inputs.propertyDetails }}
        REMOTION_SETTINGS: ${{ inputs.settings }}
        JOB_ID: ${{ inputs.jobId }}
      run: |
        echo "Starting Remotion render..."
        
        # Log the number of images received
        echo "Images input: ${{ inputs.images }}"
        echo "Number of images: $(node -e "console.log(JSON.parse(process.env.REMOTION_IMAGES).length)")"
        
        # Log each image URL
        node -e "
          const images = JSON.parse(process.env.REMOTION_IMAGES);
          console.log('Image URLs received:');
          images.forEach((url, index) => {
            console.log(\`  Image \${index + 1}: \${url}\`);
          });
        "
        
        # Create output directory
        mkdir -p out
        
        # Render the video
        npx remotion render RealEstateTour out/${{ inputs.jobId }}.mp4 \
          --props="$(node -e "
            const images = JSON.parse(process.env.REMOTION_IMAGES);
            const propertyDetails = JSON.parse(process.env.REMOTION_PROPERTY_DETAILS);
            const settings = JSON.parse(process.env.REMOTION_SETTINGS);
            console.log(JSON.stringify({ images, propertyDetails, settings }));
          ")"
        
        # Check if video was created
        if [ -f "out/${{ inputs.jobId }}.mp4" ]; then
          echo "Video rendered successfully!"
          echo "VIDEO_PATH=out/${{ inputs.jobId }}.mp4" >> $GITHUB_ENV
        else
          echo "Error: Video file not found!"
          exit 1
        fi
    
    - name: Upload to Cloudinary
      working-directory: ./remotion-tours
      env:
        CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
        CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
        CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        VIDEO_PATH: ${{ env.VIDEO_PATH }}
        JOB_ID: ${{ inputs.jobId }}
      run: |
        echo "Uploading video to Cloudinary..."
        echo "Current directory: $(pwd)"
        echo "Video path: ${VIDEO_PATH}"
        
        # Install cloudinary SDK
        npm install cloudinary
        
        # Create and run upload script
        cat > upload.js << 'EOF'
        const cloudinary = require('cloudinary').v2;
        const fs = require('fs');
        
        // Configure Cloudinary
        cloudinary.config({
          cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
          api_key: process.env.CLOUDINARY_API_KEY,
          api_secret: process.env.CLOUDINARY_API_SECRET
        });
        
        // Upload video
        const videoPath = process.env.VIDEO_PATH;
        const jobId = process.env.JOB_ID;
        
        console.log(`Uploading ${videoPath}...`);
        
        cloudinary.uploader.upload(videoPath, 
          {
            public_id: jobId,
            resource_type: 'video',
            folder: 'tours'
          },
          (error, result) => {
            if (error) {
              console.error('Upload failed:', error);
              process.exit(1);
            }
            
            const videoUrl = result.secure_url;
            console.log(`VIDEO_URL=${videoUrl}`);
            
            // Write to GITHUB_ENV
            fs.appendFileSync(process.env.GITHUB_ENV, `VIDEO_URL=${videoUrl}\n`);
            
            console.log(`Successfully uploaded to: ${videoUrl}`);
          }
        );
        EOF
        
        node upload.js
    
    - name: Create result artifact
      run: |
        # Create a result file with the video URL and metadata
        cat > result.json << EOF
        {
          "success": true,
          "jobId": "${{ inputs.jobId }}",
          "videoUrl": "${VIDEO_URL}",
          "duration": $(node -e "const s = JSON.parse('${{ inputs.settings }}'); const i = JSON.parse('${{ inputs.images }}'); console.log(s.durationPerImage * i.length)"),
          "renderTime": "${{ steps.render.outputs.duration }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
        
        cat result.json
    
    - name: Upload result as artifact
      uses: actions/upload-artifact@v4
      with:
        name: render-result-${{ inputs.jobId }}
        path: result.json
        retention-days: 7
    
    - name: Notify completion (webhook)
      if: always()
      run: |
        # If you have a webhook URL, notify the Railway app
        # For now, the app will poll for the artifact
        echo "Render job completed with status: ${{ job.status }}"