name: Render Real Estate Video

on:
  workflow_dispatch:
    inputs:
      images:
        description: 'JSON array of image URLs'
        required: true
        type: string
      propertyDetails:
        description: 'JSON object with property details'
        required: true
        type: string
      settings:
        description: 'JSON object with render settings'
        required: false
        type: string
        default: '{"durationPerImage":8,"effectSpeed":"medium","transitionDuration":1.5}'
      jobId:
        description: 'Unique job identifier'
        required: true
        type: string

jobs:
  render-video:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'remotion-tours/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./remotion-tours
      run: |
        echo "Installing dependencies..."
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        
        # Clear npm cache to avoid issues
        echo "Clearing npm cache..."
        npm cache clean --force || echo "Cache clean failed, continuing..."
        
        # Check if package-lock.json exists
        if [ ! -f "package-lock.json" ]; then
          echo "ERROR: package-lock.json not found!"
          echo "Running npm install instead of npm ci..."
          npm install --legacy-peer-deps
        else
          echo "package-lock.json found, running npm ci..."
          npm ci || {
            echo "npm ci failed, trying npm install..."
            rm -rf node_modules package-lock.json
            npm install --legacy-peer-deps
          }
        fi
        
        # Ensure Remotion CLI is available
        echo "Ensuring Remotion CLI is available..."
        if ! npx remotion --version 2>/dev/null; then
          echo "Remotion CLI not found, installing..."
          npm install @remotion/cli@^4.0.331
        fi
        
        # Verify all dependencies
        echo "Verifying installations..."
        npx remotion --version || echo "ERROR: Remotion CLI still not accessible!"
        
        # List installed packages for debugging
        echo "Key packages installed:"
        npm list remotion @remotion/cli react react-dom --depth=0 || true
    
    - name: Parse inputs
      id: parse
      run: |
        echo "Parsing inputs..."
        
        # Log raw images input
        echo "Raw images input:"
        echo '${{ inputs.images }}'
        
        # Save inputs to files using cat with heredoc to avoid shell interpretation
        cat > /tmp/images.json << 'EOF'
        ${{ inputs.images }}
        EOF
        
        cat > /tmp/propertyDetails.json << 'EOF'
        ${{ inputs.propertyDetails }}
        EOF
        
        cat > /tmp/settings.json << 'EOF'
        ${{ inputs.settings }}
        EOF
        
        # Log parsed image count
        echo "Parsed image count:"
        node -e "const imgs = JSON.parse(require('fs').readFileSync('/tmp/images.json', 'utf8')); console.log('Total images:', imgs.length); imgs.forEach((img, i) => console.log(\`  Image \${i+1}: \${img}\`));"
        
        echo "Inputs saved to temporary files"
    
    - name: Test Image Accessibility
      run: |
        echo "Testing if GitHub Actions can access ImageKit images..."
        
        # Parse the first image URL for testing
        FIRST_IMAGE=$(node -e "
          const images = JSON.parse(require('fs').readFileSync('/tmp/images.json', 'utf8'));
          if (images.length > 0) {
            console.log(images[0]);
          }
        ")
        
        if [ -n "$FIRST_IMAGE" ]; then
          echo "Testing access to: $FIRST_IMAGE"
          
          # Test with curl
          echo "Testing with curl..."
          curl -I "$FIRST_IMAGE" 2>/dev/null | head -n 5 || echo "curl failed"
          
          # Test actual download
          echo "Testing actual download..."
          curl -o test_image.jpg "$FIRST_IMAGE" --max-time 30 2>&1 || echo "Download failed"
          
          if [ -f "test_image.jpg" ]; then
            FILE_SIZE=$(stat -c%s "test_image.jpg" 2>/dev/null || stat -f%z "test_image.jpg" 2>/dev/null || echo "0")
            echo "Downloaded image size: $FILE_SIZE bytes"
            if [ "$FILE_SIZE" -gt "0" ]; then
              echo "✓ Image is accessible from GitHub Actions"
            else
              echo "✗ Image downloaded but is empty"
            fi
            rm -f test_image.jpg
          else
            echo "✗ Failed to download image from ImageKit"
            echo "This might be why Remotion is failing!"
          fi
        else
          echo "No images provided to test"
        fi
    
    - name: Test Minimal Remotion Render
      working-directory: ./remotion-tours
      run: |
        echo "Testing if Remotion can render at all..."
        
        # Log system information
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Available memory: $(free -h 2>/dev/null | grep Mem || echo 'N/A')"
        
        # Create a minimal test with a data URI instead of external URL
        echo "Creating minimal props for test..."
        cat > test_props.json << 'EOF'
        {
          "images": [],
          "propertyDetails": {
            "address": "Test Property",
            "city": "Test City"
          },
          "settings": {
            "durationPerImage": 1,
            "effectSpeed": "fast",
            "transitionDuration": 0.5
          }
        }
        EOF
        
        echo "Running minimal test render (using default images)..."
        npx remotion render RealEstateTour test_minimal.mp4 \
          --props="$(cat test_props.json)" \
          --frames=0-30 \
          --concurrency=2 \
          2>&1 | tee test_render.log || {
            echo "WARNING: Minimal test render failed!"
            echo "Full test render log:"
            cat test_render.log
            echo "Continuing anyway to attempt main render..."
        }
        
        if [ -f "test_minimal.mp4" ]; then
          TEST_SIZE=$(stat -c%s "test_minimal.mp4" 2>/dev/null || stat -f%z "test_minimal.mp4" 2>/dev/null || echo "0")
          echo "✓ Minimal test render succeeded! Size: $TEST_SIZE bytes"
          rm -f test_minimal.mp4
        else
          echo "✗ Minimal test render did not produce output - checking for errors"
        fi
    
    - name: Render video with Remotion
      working-directory: ./remotion-tours
      env:
        REMOTION_IMAGES: ${{ inputs.images }}
        REMOTION_PROPERTY_DETAILS: ${{ inputs.propertyDetails }}
        REMOTION_SETTINGS: ${{ inputs.settings }}
        JOB_ID: ${{ inputs.jobId }}
      run: |
        echo "Starting FULL Remotion render..."
        
        # Debug: Check current directory and files
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        
        # Verify src files exist
        echo "Checking src directory:"
        ls -la src/ || echo "ERROR: src directory not found!"
        
        # Log the number of images received
        echo "Images input: ${{ inputs.images }}"
        echo "Number of images: $(node -e "console.log(JSON.parse(process.env.REMOTION_IMAGES).length)" 2>/dev/null || echo "ERROR parsing images")"
        
        # Log each image URL
        node -e "
          try {
            const images = JSON.parse(process.env.REMOTION_IMAGES);
            console.log('Image URLs received:');
            images.forEach((url, index) => {
              console.log(\`  Image \${index + 1}: \${url}\`);
            });
          } catch (e) {
            console.error('ERROR parsing images:', e.message);
            process.exit(1);
          }
        " || exit 1
        
        # Create output directory
        mkdir -p out
        
        # Generate props JSON file for debugging
        node -e "
          try {
            const images = JSON.parse(process.env.REMOTION_IMAGES);
            const propertyDetails = JSON.parse(process.env.REMOTION_PROPERTY_DETAILS);
            const settings = JSON.parse(process.env.REMOTION_SETTINGS);
            const props = { images, propertyDetails, settings };
            require('fs').writeFileSync('props.json', JSON.stringify(props, null, 2));
            console.log('Props saved to props.json');
            console.log(JSON.stringify(props));
          } catch (e) {
            console.error('ERROR generating props:', e.message);
            process.exit(1);
          }
        " > props_output.json || exit 1
        
        echo "Props JSON:"
        cat props.json || echo "ERROR: props.json not created"
        
        # Show the exact command that will be run
        echo "=== EXACT REMOTION COMMAND ==="
        echo "npx remotion render RealEstateTour out/${{ inputs.jobId }}.mp4 --props='$(cat props_output.json)'"
        echo "=== END COMMAND ==="
        
        # Check if any image URLs contain problematic characters
        node -e "
          const images = JSON.parse(process.env.REMOTION_IMAGES);
          images.forEach((url, i) => {
            if (url.includes('\"') || url.includes(\"'\")) {
              console.error(\`WARNING: Image \${i+1} contains quotes which may break the command\`);
            }
          });
        "
        
        # Render the video with error handling
        echo "Executing Remotion render command..."
        echo "Memory before render: $(free -h 2>/dev/null | grep Mem || echo 'N/A')"
        
        # Try with reduced concurrency to avoid memory issues
        npx remotion render RealEstateTour out/${{ inputs.jobId }}.mp4 \
          --props="$(cat props_output.json)" \
          --concurrency=4 \
          --timeout=300000 \
          2>&1 | tee render.log || {
            echo "ERROR: Remotion render failed!"
            echo "Full render log:"
            cat render.log
            
            # Check for specific error patterns
            if grep -q "Failed to fetch" render.log; then
              echo "ERROR: Remotion could not fetch images from ImageKit"
              echo "This is likely a network/access issue"
            fi
            
            if grep -q "out of memory" render.log; then
              echo "ERROR: Remotion ran out of memory"
              echo "Reducing image count or resolution may help"
            fi
            
            if grep -q "durationInFrames" render.log; then
              echo "ERROR: Duration calculation issue"
              echo "Check the composition's calculateMetadata function"
            fi
            
            exit 1
          }
        
        echo "Memory after render: $(free -h 2>/dev/null | grep Mem || echo 'N/A')"
        
        # Check if video was created
        if [ -f "out/${{ inputs.jobId }}.mp4" ]; then
          echo "Video rendered successfully!"
          VIDEO_SIZE=$(stat -c%s "out/${{ inputs.jobId }}.mp4" 2>/dev/null || stat -f%z "out/${{ inputs.jobId }}.mp4" 2>/dev/null || echo "0")
          echo "Video size: ${VIDEO_SIZE} bytes"
          echo "VIDEO_PATH=out/${{ inputs.jobId }}.mp4" >> $GITHUB_ENV
        else
          echo "ERROR: Video file not found after render!"
          echo "Directory contents:"
          ls -la out/
          exit 1
        fi
    
    - name: Upload to ImageKit
      working-directory: ./remotion-tours
      env:
        IMAGEKIT_PRIVATE_KEY: ${{ secrets.IMAGEKIT_PRIVATE_KEY }}
        IMAGEKIT_PUBLIC_KEY: ${{ secrets.IMAGEKIT_PUBLIC_KEY }}
        IMAGEKIT_URL_ENDPOINT: ${{ secrets.IMAGEKIT_URL_ENDPOINT }}
        VIDEO_PATH: ${{ env.VIDEO_PATH }}
        JOB_ID: ${{ inputs.jobId }}
      run: |
        echo "Uploading video to ImageKit..."
        echo "Current directory: $(pwd)"
        echo "Video path: ${VIDEO_PATH}"
        
        # Verify environment variables
        if [ -z "${IMAGEKIT_PRIVATE_KEY}" ]; then
          echo "ERROR: IMAGEKIT_PRIVATE_KEY is not set!"
          echo "Please add IMAGEKIT_PRIVATE_KEY to GitHub Secrets"
          exit 1
        fi
        
        if [ -z "${IMAGEKIT_PUBLIC_KEY}" ]; then
          echo "ERROR: IMAGEKIT_PUBLIC_KEY is not set!"
          echo "Please add IMAGEKIT_PUBLIC_KEY to GitHub Secrets"
          exit 1
        fi
        
        if [ -z "${IMAGEKIT_URL_ENDPOINT}" ]; then
          echo "ERROR: IMAGEKIT_URL_ENDPOINT is not set!"
          echo "Please add IMAGEKIT_URL_ENDPOINT to GitHub Secrets"
          exit 1
        fi
        
        echo "ImageKit credentials are configured (values hidden for security)"
        
        # Verify video file exists and has content
        if [ ! -f "${VIDEO_PATH}" ]; then
          echo "ERROR: Video file not found at ${VIDEO_PATH}"
          echo "Directory contents:"
          ls -la out/
          exit 1
        fi
        
        VIDEO_SIZE=$(stat -c%s "${VIDEO_PATH}" 2>/dev/null || stat -f%z "${VIDEO_PATH}" 2>/dev/null || echo "0")
        echo "Video file size: ${VIDEO_SIZE} bytes"
        VIDEO_SIZE_MB=$((VIDEO_SIZE / 1048576))
        echo "Video file size: ${VIDEO_SIZE_MB} MB"
        
        if [ "${VIDEO_SIZE}" -eq "0" ]; then
          echo "ERROR: Video file is empty"
          exit 1
        fi
        
        # Install imagekit SDK with error handling
        echo "Installing ImageKit SDK..."
        npm install imagekit || {
          echo "ERROR: Failed to install ImageKit SDK"
          echo "Trying with --force flag..."
          npm install imagekit --force || exit 1
        }
        
        # Create and run upload script
        cat > upload.js << 'EOF'
        const ImageKit = require('imagekit');
        const fs = require('fs');
        
        // Configure ImageKit
        const imagekit = new ImageKit({
          publicKey: process.env.IMAGEKIT_PUBLIC_KEY,
          privateKey: process.env.IMAGEKIT_PRIVATE_KEY,
          urlEndpoint: process.env.IMAGEKIT_URL_ENDPOINT
        });
        
        // Upload video
        const videoPath = process.env.VIDEO_PATH;
        const jobId = process.env.JOB_ID;
        
        console.log(`Uploading ${videoPath} to ImageKit...`);
        
        // Read video file
        const videoBuffer = fs.readFileSync(videoPath);
        const videoBase64 = videoBuffer.toString('base64');
        
        imagekit.upload({
          file: videoBase64,
          fileName: `${jobId}.mp4`,
          folder: '/tours/videos/',
          useUniqueFileName: false
        }).then(response => {
            const videoUrl = response.url;
            console.log(`VIDEO_URL=${videoUrl}`);
            
            // Verify URL is valid
            if (!videoUrl || videoUrl === 'undefined') {
              console.error('ERROR: ImageKit returned invalid URL');
              console.error('Full result:', JSON.stringify(response, null, 2));
              process.exit(1);
            }
            
            // Write to GITHUB_ENV
            fs.appendFileSync(process.env.GITHUB_ENV, `VIDEO_URL=${videoUrl}\n`);
            
            console.log(`Successfully uploaded to ImageKit: ${videoUrl}`);
            console.log(`Video fileId: ${response.fileId}`);
            console.log(`Video size: ${response.size} bytes`);
          }).catch(error => {
            console.error('Upload failed:', error);
            process.exit(1);
          });
        EOF
        
        node upload.js
    
    - name: Create result artifact
      run: |
        # Create a result file with the video URL and metadata
        # Ensure VIDEO_URL has a default value if empty
        if [ -z "${VIDEO_URL}" ]; then
          echo "WARNING: VIDEO_URL is empty, using placeholder"
          VIDEO_URL="error:no-video-url"
        fi
        
        # Calculate duration safely
        DURATION=$(node -e "
          try {
            const s = JSON.parse('${{ inputs.settings }}');
            const i = JSON.parse('${{ inputs.images }}');
            console.log(s.durationPerImage * i.length);
          } catch (e) {
            console.log(0);
          }
        ")
        
        # Create JSON with proper escaping
        cat > result.json << EOF
        {
          "success": true,
          "jobId": "${{ inputs.jobId }}",
          "videoUrl": "${VIDEO_URL}",
          "duration": ${DURATION:-0},
          "renderTime": "${{ steps.render.outputs.duration }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
        
        # Validate JSON before proceeding
        if ! jq . result.json > /dev/null 2>&1; then
          echo "ERROR: Invalid JSON generated, creating fallback"
          cat > result.json << EOF
        {
          "success": false,
          "jobId": "${{ inputs.jobId }}",
          "videoUrl": "error:invalid-json",
          "duration": 0,
          "renderTime": "unknown",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "error": "Failed to generate valid result JSON"
        }
        EOF
        fi
        
        echo "Result JSON:"
        cat result.json
    
    - name: Upload result as artifact
      uses: actions/upload-artifact@v4
      with:
        name: render-result-${{ inputs.jobId }}
        path: result.json
        retention-days: 7
    
    - name: Upload video as artifact (backup)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: video-${{ inputs.jobId }}
        path: remotion-tours/out/${{ inputs.jobId }}.mp4
        retention-days: 7
      continue-on-error: true
    
    - name: Notify completion (webhook)
      if: always()
      run: |
        # If you have a webhook URL, notify the Railway app
        # For now, the app will poll for the artifact
        echo "Render job completed with status: ${{ job.status }}"