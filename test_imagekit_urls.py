#!/usr/bin/env python3
"""
Check what URLs are actually being generated by ImageKit uploads
"""

import os
import sys
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Add parent directory to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imagekit_urls():
    """Test what URLs ImageKit generates."""
    
    print("=" * 60)
    print("ImageKit URL Format Test")
    print("=" * 60)
    
    # Get credentials
    private_key = os.environ.get('IMAGEKIT_PRIVATE_KEY')
    public_key = os.environ.get('IMAGEKIT_PUBLIC_KEY')
    url_endpoint = os.environ.get('IMAGEKIT_URL_ENDPOINT')
    
    print(f"URL Endpoint: {url_endpoint}")
    print(f"Public Key: {public_key[:10]}..." if public_key else "Not set")
    print(f"Private Key: {'Set' if private_key else 'Not set'}")
    
    # Expected URL format
    print("\n" + "-" * 60)
    print("Expected URL formats:")
    print("-" * 60)
    print(f"Images: {url_endpoint}tours/images/<filename>")
    print(f"Videos: {url_endpoint}tours/videos/<filename>")
    
    # Test creating a simple upload
    print("\n" + "-" * 60)
    print("Testing simple upload:")
    print("-" * 60)
    
    # Create a test file
    test_file = "test_upload.txt"
    with open(test_file, "w") as f:
        f.write("Test content for ImageKit upload")
    
    try:
        from imagekit_integration import get_imagekit
        
        imagekit = get_imagekit()
        if imagekit:
            print("[OK] ImageKit initialized")
            
            # Upload the test file
            result = imagekit.upload_file(test_file, "test_urls.txt", "/tours/test/")
            
            if result.get('success'):
                url = result.get('url')
                print(f"\n[SUCCESS] File uploaded")
                print(f"URL: {url}")
                
                # Parse the URL
                if url:
                    import urllib.parse
                    parsed = urllib.parse.urlparse(url)
                    print(f"\nURL Components:")
                    print(f"  Scheme: {parsed.scheme}")
                    print(f"  Host: {parsed.netloc}")
                    print(f"  Path: {parsed.path}")
                    
                    # Test accessibility
                    import requests
                    print(f"\nTesting accessibility:")
                    try:
                        response = requests.get(url, timeout=10)
                        if response.status_code == 200:
                            print(f"  [OK] Publicly accessible")
                            print(f"  Content: {response.text[:50]}...")
                        else:
                            print(f"  [FAIL] Status: {response.status_code}")
                    except Exception as e:
                        print(f"  [ERROR] {e}")
            else:
                print(f"[FAIL] Upload failed: {result}")
        else:
            print("[ERROR] ImageKit not initialized")
            
    except Exception as e:
        print(f"[ERROR] {e}")
        import traceback
        traceback.print_exc()
    finally:
        # Clean up test file
        if os.path.exists(test_file):
            os.remove(test_file)
    
    # Check if we need to fix URL generation
    print("\n" + "=" * 60)
    print("ANALYSIS:")
    print("=" * 60)
    print("\nIf URLs are not accessible, check:")
    print("1. ImageKit dashboard settings for public access")
    print("2. Folder permissions in ImageKit")
    print("3. URL endpoint configuration")
    print("4. Consider using transformation URLs for public access")

if __name__ == "__main__":
    test_imagekit_urls()